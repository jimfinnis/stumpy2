
NOTE : * means done, - means not done

* lengthen duration (pow2 mult)
* make the gap in chordplay relate to the chord length (no, make it seconds).
* make the select input in chordplay an integer (so can be fed from denseq)
* other osc waveforms 

* add a transpose to chordplay (for octaves down, etc)
* chord note select player :
    - note select input, fed by denseq typically
    - two trigger inputs.
        - gate: don't play anything if low AND connected
        - note: triggers each note
    - in free-run mode the start input isn't used, it just loops.
    - chord input
  
* Clocks go out of sync!
* ramps/envelopes (have to be quite long in duration)

* Should be impossible to close lib. with a patch open

* connectors
* pages
- macros

- Clocks don't go out of sync now, but it's really hard to change
their frequency on the fly because of how they work.

- Clocks should have a humanize function - or better still,
there should be a tickdelay component which imposes a random
delay (generated by perlin noise, or coming from a float input).

* crossfader, and global vel multiplier for it. Works with a float
input, so 0 gives all 0, 0.5 gives 0.5 of 0 and 0.5 of 1. Flow
inputs which DON'T RUN if float at that pt. is zero.

- bar switcher: takes a tick input and a number of other inputs.
  Selects from the inputs based on the current tick count indexing
  into a "select string" and "select count string".
  For example, the select string "01" means that input 0 is used, then
  input 1, then repeat. With the select count string "43", input 0
  will be used for four ticks, and input 1 for three.
  Envisaged as being driven by the cycle tick output of sequencers
  and generators to produce interesting repeating cycles.

- Fadeout & transfer to another patch
 ("fadeout", "fadein" and "transfer" components) AND DOCS because complex.
 The transfer component has a tick input which starts the transfer to 
 a named patch.
 Once started, both patches may be active for the duration of the fade,
 depending on settings in the transfer (a "crossfade" boolean).
 The fadeout component is a vel modifier which fades the old patch out,
 the fadein component is the same, and fades the new patch in. 
 Once fadeout is completed, the old patch becomes inactive and instances
 are deleted.
 Fadeout and fadein have their own ramp times.
